import asyncio
import logging
import os
import tempfile
import subprocess
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, Voice
import speech_recognition as sr
from pydub import AudioSegment
import ffmpeg
from sqlalchemy.orm import Session
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from config import config
from models import Base, User, Task
from nlp_utils import extract_task_info, extract_user_mention

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

# Database setup
engine = create_engine(config.DATABASE_URL)
Base.metadata.create_all(engine)
SessionLocal = sessionmaker(bind=engine)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

async def convert_ogg_to_wav(ogg_path: str, wav_path: str) -> bool:
    """Convert OGG to WAV using ffmpeg with timeout"""
    try:
        # Use subprocess instead of ffmpeg-python for better control
        process = await asyncio.create_subprocess_exec(
            'ffmpeg', '-y', '-i', ogg_path, wav_path,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        try:
            # Wait for process with timeout
            await asyncio.wait_for(process.communicate(), timeout=10.0)
            return process.returncode == 0
        except asyncio.TimeoutError:
            process.kill()
            logger.error("FFmpeg conversion timed out")
            return False
    except Exception as e:
        logger.error(f"Error in convert_ogg_to_wav: {e}")
        return False

async def convert_voice_to_text(voice: Voice) -> str:
    """Convert voice message to text using speech recognition"""
    try:
        logger.info("Starting voice message processing")
        
        # Create temporary files
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as ogg_file, \
             tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as wav_file:
            
            logger.info("Downloading voice file")
            # Download voice file
            voice_file = await bot.download(voice)
            ogg_file.write(voice_file.read())
            ogg_file.flush()
            logger.info(f"Voice file saved to {ogg_file.name}")
            
            try:
                logger.info("Converting OGG to WAV")
                # Convert ogg to wav using ffmpeg with timeout
                if not await convert_ogg_to_wav(ogg_file.name, wav_file.name):
                    logger.error("Failed to convert OGG to WAV")
                    return None
                
                logger.info(f"WAV file saved to {wav_file.name}")
                
                # Recognize speech
                logger.info("Starting speech recognition")
                recognizer = sr.Recognizer()
                with sr.AudioFile(wav_file.name) as source:
                    logger.info("Reading audio file")
                    audio_data = recognizer.record(source)
                    logger.info("Sending to Google Speech Recognition")
                    try:
                        text = recognizer.recognize_google(audio_data, language='ru-RU')
                        logger.info(f"Successfully recognized text: {text}")
                        return text
                    except sr.UnknownValueError:
                        logger.error("Speech recognition could not understand audio")
                        return None
                    except sr.RequestError as e:
                        logger.error(f"Could not request results from speech recognition service: {e}")
                        return None
            finally:
                # Clean up temporary files
                logger.info("Cleaning up temporary files")
                try:
                    os.unlink(ogg_file.name)
                    os.unlink(wav_file.name)
                except Exception as e:
                    logger.error(f"Error cleaning up files: {e}")
    except Exception as e:
        logger.error(f"Error in convert_voice_to_text: {e}", exc_info=True)
        return None

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """Handle the /start command"""
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    
    if not user:
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username
        )
        db.add(user)
        db.commit()
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, –∏—Å–ø–æ–ª—å–∑—É—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º—É –¥–Ω—é. –í–∞–∂–Ω–æ!'\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏! üé§",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """Handle the /help command"""
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/mytasks - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –º–Ω–µ
/created_tasks - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —è —Å–æ–∑–¥–∞–ª
/assign <ID –∑–∞–¥–∞—á–∏> @username - –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/delete <ID –∑–∞–¥–∞—á–∏> - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
/edit <ID –∑–∞–¥–∞—á–∏> <–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ> - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ü—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á:
- "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º—É –¥–Ω—é"
- "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º @username –¥–æ –ø—è—Ç–Ω–∏—Ü—ã"
- "–ó–∞–¥–∞—á–∞: –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)"

üé§ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!
    """
    await message.answer(help_text, reply_markup=types.ReplyKeyboardRemove())

@dp.message(Command("created_tasks"))
async def show_created_tasks(message: Message):
    """Show tasks created by the user"""
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    
    if not user:
        await message.answer("–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    tasks = user.created_tasks
    
    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    response = "üìã –ó–∞–¥–∞—á–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏:\n\n"
    for task in tasks:
        status_emoji = "‚úÖ" if task.is_completed else "‚è≥"
        response += f"{status_emoji} #{task.id} {task.title}\n"
        if task.description:
            response += f"   üìù {task.description}\n"
        if task.due_date:
            response += f"   ‚è∞ –°—Ä–æ–∫: {task.due_date.strftime('%d.%m.%Y')}\n"
        response += f"   üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}\n"
        if task.assignee:
            response += f"   üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{task.assignee.username}\n"
        response += "\n"
    
    await message.answer(response, reply_markup=types.ReplyKeyboardRemove())

@dp.message(lambda message: message.text and any(phrase in message.text.lower() for phrase in ["—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "–∑–∞–¥–∞—á–∞:"]))
async def create_task(message: Message):
    """Handle natural language task creation"""
    await process_task_creation(message, message.text)

@dp.message(lambda message: message.voice is not None)
async def handle_voice(message: Message):
    """Handle voice messages"""
    try:
        logger.info("Received voice message")
        # Send processing message
        processing_msg = await message.answer("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # Convert voice to text
        logger.info("Converting voice to text")
        text = await convert_voice_to_text(message.voice)
        
        if not text:
            logger.error("Failed to recognize voice message")
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return
        
        # Edit processing message to show recognized text
        logger.info(f"Recognized text: {text}")
        await processing_msg.edit_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}\n\n–°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É...")
        
        # Process the task
        await process_task_creation(message, text)
    except Exception as e:
        logger.error(f"Error in handle_voice: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç.")

async def process_task_creation(message: Message, text: str):
    """Process task creation from text"""
    try:
        logger.info(f"Processing task creation with text: {text}")
        db = next(get_db())
        
        # Get or create user
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            user = User(telegram_id=message.from_user.id, username=message.from_user.username)
            db.add(user)
            db.commit()
        
        # Extract task information
        title, description, due_date, priority = extract_task_info(text)
        assignee_username = extract_user_mention(text)
        
        # Create task
        task = Task(
            title=title,
            description=description,
            due_date=due_date,
            priority=priority,
            creator_id=user.id
        )
        
        if assignee_username:
            assignee = db.query(User).filter(User.username == assignee_username).first()
            if assignee:
                task.assignee_id = assignee.id
        
        db.add(task)
        db.commit()
        
        # Prepare response message
        response = f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:\n\n"
        response += f"üìå {task.title}\n"
        if task.description:
            response += f"üìù {task.description}\n"
        if task.due_date:
            response += f"‚è∞ –°—Ä–æ–∫: {task.due_date.strftime('%d.%m.%Y')}\n"
        response += f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}\n"
        
        await message.answer(response)
    except Exception as e:
        logger.error(f"Error in process_task_creation: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(Command("mytasks"))
async def show_my_tasks(message: Message):
    """Show tasks assigned to the user"""
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    
    if not user:
        await message.answer("–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    # Get tasks where user is assignee
    tasks = db.query(Task).filter(Task.assignee_id == user.id).all()
    
    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks:
        status_emoji = "‚úÖ" if task.is_completed else "‚è≥"
        response += f"{status_emoji} #{task.id} {task.title}\n"
        if task.description:
            response += f"   üìù {task.description}\n"
        if task.due_date:
            response += f"   ‚è∞ –°—Ä–æ–∫: {task.due_date.strftime('%d.%m.%Y')}\n"
        response += f"   üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}\n"
        response += f"   üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: @{task.creator.username}\n\n"
    
    await message.answer(response, reply_markup=types.ReplyKeyboardRemove())

@dp.message(Command("assign"))
async def assign_task(message: Message):
    """Assign task to a user"""
    try:
        # Parse command arguments
        args = message.text.split()
        if len(args) != 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /assign <ID –∑–∞–¥–∞—á–∏> @username\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /assign 1 @ivan",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return

        task_id = args[1]
        assignee_username = args[2].lstrip('@')

        db = next(get_db())
        
        # Get current user
        current_user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not current_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=types.ReplyKeyboardRemove())
            return

        # Get task
        task = db.query(Task).filter(Task.id == task_id).first()
        if not task:
            await message.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
            return

        # Check if user is the creator of the task
        if task.creator_id != current_user.id:
            await message.answer(
                "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª–∏ —Å–∞–º–∏.\n"
                f"ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏: {task.creator_id}\n"
                f"–í–∞—à ID: {current_user.id}",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return

        # Get assignee
        assignee = db.query(User).filter(User.username == assignee_username).first()
        if not assignee:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{assignee_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
            return

        # Assign task
        task.assignee_id = assignee.id
        db.commit()

        # Prepare response
        response = f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞:\n\n"
        response += f"üìå {task.title}\n"
        if task.description:
            response += f"üìù {task.description}\n"
        if task.due_date:
            response += f"‚è∞ –°—Ä–æ–∫: {task.due_date.strftime('%d.%m.%Y')}\n"
        response += f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}\n"
        response += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{assignee.username}"

        await message.answer(response, reply_markup=types.ReplyKeyboardRemove())

        # Notify assignee
        try:
            await bot.send_message(
                assignee.telegram_id,
                f"üì¨ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞:\n\n"
                f"üìå {task.title}\n"
                f"üë§ –û—Ç: @{message.from_user.username}",
                reply_markup=types.ReplyKeyboardRemove()
            )
        except Exception as e:
            logger.error(f"Failed to notify assignee: {e}")

    except Exception as e:
        logger.error(f"Error in assign_task: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Command("delete"))
async def delete_task(message: Message):
    """Delete a task"""
    try:
        # Parse command arguments
        args = message.text.split(maxsplit=1)
        if len(args) != 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete <ID –∑–∞–¥–∞—á–∏>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /delete 1",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return

        task_id = args[1]
        db = next(get_db())
        
        # Get current user
        current_user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not current_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=types.ReplyKeyboardRemove())
            return

        # Get task
        task = db.query(Task).filter(Task.id == task_id).first()
        if not task:
            await message.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
            return

        # Check if user is the creator of the task
        if task.creator_id != current_user.id:
            await message.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª–∏ —Å–∞–º–∏.", reply_markup=types.ReplyKeyboardRemove())
            return

        # Delete task
        db.delete(task)
        db.commit()

        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task.id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())

    except Exception as e:
        logger.error(f"Error in delete_task: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Command("edit"))
async def edit_task(message: Message):
    """Edit a task"""
    try:
        # Parse command arguments
        args = message.text.split(maxsplit=2)
        if len(args) != 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit <ID –∑–∞–¥–∞—á–∏> <–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /edit 1 –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return

        task_id = args[1]
        new_title = args[2]
        
        db = next(get_db())
        
        # Get current user
        current_user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not current_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=types.ReplyKeyboardRemove())
            return

        # Get task
        task = db.query(Task).filter(Task.id == task_id).first()
        if not task:
            await message.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
            return

        # Check if user is the creator of the task
        if task.creator_id != current_user.id:
            await message.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª–∏ —Å–∞–º–∏.", reply_markup=types.ReplyKeyboardRemove())
            return

        # Update task
        old_title = task.title
        task.title = new_title
        db.commit()

        # Prepare response
        response = f"‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n\n"
        response += f"üìå –°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {old_title}\n"
        response += f"üìå –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n"
        if task.description:
            response += f"üìù {task.description}\n"
        if task.due_date:
            response += f"‚è∞ –°—Ä–æ–∫: {task.due_date.strftime('%d.%m.%Y')}\n"
        response += f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}\n"
        if task.assignee:
            response += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{task.assignee.username}"

        await message.answer(response, reply_markup=types.ReplyKeyboardRemove())

        # Notify assignee if exists
        if task.assignee:
            try:
                await bot.send_message(
                    task.assignee.telegram_id,
                    f"üìù –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n\n"
                    f"üìå {task.title}\n"
                    f"üë§ –û—Ç: @{message.from_user.username}",
                    reply_markup=types.ReplyKeyboardRemove()
                )
            except Exception as e:
                logger.error(f"Failed to notify assignee: {e}")

    except Exception as e:
        logger.error(f"Error in edit_task: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=types.ReplyKeyboardRemove())

async def main():
    # Set up commands menu
    commands = [
        types.BotCommand(command="mytasks", description="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –º–Ω–µ"),
        types.BotCommand(command="created_tasks", description="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —è —Å–æ–∑–¥–∞–ª"),
        types.BotCommand(command="assign", description="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"),
        types.BotCommand(command="delete", description="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"),
        types.BotCommand(command="edit", description="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"),
        types.BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    ]
    await bot.set_my_commands(commands)
    
    # Start polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 